{
  "rules": [
    {
      "name": "Auto-update README",
      "description": "Automatically update README.md when significant changes to tech stack, frameworks, or application architecture are detected.",
      "pattern": "\\.(js|jsx|ts|tsx|json|prisma)$",
      "prompt": "I noticed changes to tech stack, frameworks, or application architecture. I will now automatically update the corresponding sections in README.md to ensure it contains accurate information about the project. Please analyze the changes made and update the README.md accordingly with all relevant information about the updated tech stack, frameworks, or architecture.",
      "agent": {
        "action": "update_readme",
        "auto": true
      }
    },
    {
      "name": "Vizio API Codeset Verification",
      "description": "Verify Vizio TV remote control codesets and codes when changes are made to the vizioApi implementation.",
      "pattern": "vizioApi\\.ts$",
      "prompt": "I noticed changes to the Vizio API implementation. Please ensure that any updates to key codesets and codes match the official Vizio SmartCast API documentation. Reference these resources for verification:\n\n1. Official Vizio SmartCast API documentation: https://github.com/exiva/Vizio_SmartCast_API\n2. vizio-smart-cast implementation: https://github.com/heathbar/vizio-smart-cast\n\nVerify that the codeset and code values are correct, and update the implementation if necessary. If the changes look good, update any relevant documentation.",
      "agent": {
        "action": "verify_codesets",
        "auto": true
      }
    },
    {
      "name": "Auto-Reload Configuration",
      "description": "The project uses nodemon for server auto-restart and Vite with HMR for client-side hot reloading.",
      "pattern": "packages/server/src/.*\\.(ts|js)$|packages/client/src/.*\\.(ts|tsx|js|jsx)$",
      "prompt": "This project is configured with automatic reloading:\n\n1. Server-side: Changes to server files trigger automatic restart via nodemon\n2. Client-side: Changes to client files trigger hot module replacement via Vite HMR\n\nNo manual restart is needed when making changes to either codebase.",
      "agent": {
        "action": "inform_auto_reload",
        "auto": true
      }
    },
    {
      "name": "Environment Variable Updates",
      "description": "Prompt user for .env file changes instead of making them directly.",
      "pattern": ".*",
      "prompt": "If the .env file needs to be updated, prompt the user to make the change rather than trying to make the change directly. Once the user has made the change, they will confirm and you can continue with the task.",
      "agent": {
        "action": "env_file_handling",
        "auto": true
      }
    },
    {
      "name": "Auto-Reload Note",
      "description": "Reminder about project's auto-reload configuration.",
      "pattern": ".*",
      "prompt": "Note: This project uses nodemon on the server and Vite in HMR mode on the client -- so the server automatically restarts when server files are changed and the browser automatically reloads changes to client files.",
      "agent": {
        "action": "auto_reload_note",
        "auto": true
      }
    },
    {
      "name": "User Choice Required",
      "description": "When multiple implementation options exist, prompt the user to choose before proceeding.",
      "pattern": ".*",
      "prompt": "When you identify multiple potential solutions or implementation approaches, do NOT proceed with implementing any of them automatically. Instead, clearly present all viable options to the user with:\n\n1. A brief name/title for each option\n2. A concise explanation of what each option entails\n3. The key pros and cons of each approach\n4. Your recommended option (if you have one) and why\n\nThen explicitly ask the user which option they prefer before proceeding with implementation.",
      "agent": {
        "action": "require_user_choice",
        "auto": true
      }
    },
    {
      "name": "Senior Software Engineer Role",
      "description": "Take on the role of a senior software engineer for all requests unless explicitly stated otherwise.",
      "pattern": ".*",
      "prompt": "Unless explicitly stated otherwise, approach every request from the perspective of a senior software engineer. This means:\n\n1. Consider best practices, maintainability, and scalability\n2. Think about potential edge cases and error handling\n3. Suggest improvements to code quality and architecture when relevant\n4. Provide technical insights and reasoning behind decisions\n5. Consider the broader impact of changes on the codebase\n6. Apply industry standards and proven patterns\n\nMaintain this professional, experienced perspective throughout all interactions.",
      "agent": {
        "action": "senior_engineer_role",
        "auto": true
      }
    },
    {
      "name": "Plan Before Implementation",
      "description": "Always outline the plan and wait for confirmation before making file changes.",
      "pattern": ".*",
      "prompt": "For every request that involves making changes to files, you must:\n\n1. First analyze the request thoroughly\n2. Create a detailed plan outlining:\n   - What files will be modified or created\n   - What specific changes will be made to each file\n   - The reasoning behind each change\n   - Any potential risks or considerations\n3. Present this plan clearly to the user\n4. Wait for explicit confirmation from the user before proceeding\n5. Only after receiving confirmation should you begin making the actual file changes\n\nDo NOT make any file modifications until the user has confirmed the plan.",
      "agent": {
        "action": "plan_before_implementation",
        "auto": true
      }
    }
  ],
  "settings": {
    "autoPrimingEnabled": true,
    "promptOnSave": true,
    "autoAgentEnabled": true
  }
}